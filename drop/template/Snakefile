from pathlib import Path
import drop
import wbuild
from wbuild.createIndex import createIndexRule, ci

configfile: "config.yaml"

projectDir = Path.cwd().resolve()
drop.installRPackages()
drop.checkDropVersion(projectDir)
_, projectPaths = drop.setupPaths(projectDir)
tmp_dir = projectPaths["tmpDir"]

cfg = drop.config.DropConfig(wbuild.utils.Config())
sa = cfg.sampleAnnotation
config = cfg.config_dict # legacy

include: drop.utils.getWBuildSnakefile()
include: cfg.AE.getWorkdir() + "/Snakefile"
include: cfg.AS.getWorkdir() + "/Snakefile"
include: cfg.MAE.getWorkdir() + "/Snakefile"

rule all:
    input: 
        rules.aberrantExpression.output,
        rules.aberrantSplicing.output,
        rules.mae.output,
        rules.Index.output,
        dep_graph = cfg.get("htmlOutputPath") + "/dependency.done"
    shell:
        """
        rm {input.dep_graph}
        """

rule sampleAnnotation:
    input: cfg.getProcessedDataDir() + "/sample_anno/sample_anno.done"

rule exportCounts:
    input:
        cfg.exportCounts.getExportCountFiles("geneCounts"),
        cfg.exportCounts.getExportCountFiles("splicingCounts", expandPattern="k_{type}_counts", type=["j", "theta"]),
        cfg.exportCounts.getExportCountFiles("splicingCounts", expandPattern="n_{type}_counts", type=["psi5", "psi3", "theta"]),
        cfg.getProcessedResultsDir() + "/exported_counts/sample_anno.done"

rule dependencyGraph:
    input:
        rules.aberrantExpression_dependency.output,
        rules.aberrantSplicing_dependency.output,
        rules.mae_dependency.output
    output: touch(cfg.get("htmlOutputPath") + "/dependency.done")
    priority: 1

rule publish_local:
    shell: "rsync -Ort {config[htmlOutputPath]} {config[webDir]}"
