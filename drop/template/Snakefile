from pathlib import Path
import os
import drop
import wbuild
from wbuild.createIndex import createIndexRule, ci

configfile: "config.yaml"

projectDir = Path.cwd().resolve()
drop.checkDropVersion(projectDir)
_, projectPaths = drop.setupPaths(projectDir)
tmp_dir = projectPaths["tmpDir"]

cfg = drop.config.DropConfig(wbuild.utils.Config(), projectDir)
drop.installRPackages(cfg)
sa = cfg.sampleAnnotation
config = cfg.config_dict # legacy

def find_snakefile(module):
    if os.path.isdir(module.getWorkdir()):
        return module.getWorkdir() + "/Snakefile"
    else:
        return module.getWorkdir(hide_dir = True) + "/Snakefile"


def moduleInputOutput(index_name, work_dir,run):
    if(run):
        index_input, index_output, graph_file, _ = createIndexRule(
            scriptsPath=str(work_dir),
            index_name= index_name
        )
        return index_input,graph_file,index_output
    else:
        #dummy return of root directory which already exists
        return cfg.root,cfg.root,cfg.root

def renameLocalDir(module):
    work_dir = module.getWorkdir(str_=False)
    work_dir_prefix = str(work_dir).rsplit("Scripts",1)[0] + "Scripts/"
    work_dir_off = work_dir_prefix + "_" + module.name
    work_dir_on = work_dir_prefix + module.name

    if module.run:
        work_dir = Path(work_dir_on  + "/pipeline")
        if(os.path.isdir(work_dir_off)):
            try:
                os.rename(work_dir_off,work_dir_on)
            except:
                raise OSError(f"Could not rename {work_dir_off} to {work_dir_on}\n \
                    try running 'drop update' to reset file structure\n")
    else:
        work_dir = Path(work_dir_off + "/pipeline")
        if(os.path.isdir(work_dir_on)):
            try:
                os.rename(work_dir_on,work_dir_off)
            except:
                raise OSError(f"Could not rename {work_dir_on} to {work_dir_off}\n \
                    try running 'drop update' to reset file structure\n")

    return work_dir

include: find_snakefile(cfg.AE)
include: find_snakefile(cfg.AS)
include: find_snakefile(cfg.MAE)
include: drop.utils.getWBuildSnakefile()


# don't allow the dataset wildcard to contain '--' as this is a delimter
wildcard_constraints:
    dataset="((?!--).)*"

rule all:
    input:
        rules.aberrantExpression.output,
        rules.aberrantSplicing.output,
        rules.mae.output,
        rules.Index.output,
        dep_graph = cfg.get("htmlOutputPath") + "/dependency.done"
    shell:
        """
        rm {input.dep_graph}
        """

rule sampleAnnotation:
    input: rules.Pipeline_SampleAnnotation_R.output

rule exportCounts:
    input:
        cfg.exportCounts.getExportCountFiles("geneCounts"),
        cfg.exportCounts.getExportCountFiles("splicingCounts", expandPattern="k_{type}_counts", type=["j", "theta"]),
        cfg.exportCounts.getExportCountFiles("splicingCounts", expandPattern="n_{type}_counts", type=["psi5", "psi3", "theta"]),
    output:
        sampleAnnotations = cfg.exportCounts.getFiles("sampleAnnotation.tsv"),
        descriptions = cfg.exportCounts.getFiles("DESCRIPTION.txt"),
    params:
        dropConfig = cfg,
        sampleAnnotation = sa
    script: "Scripts/Pipeline/exportCountsMeta.py"

rule dependencyGraph:
    input:
        rules.aberrantExpression_dependency.output,
        rules.aberrantSplicing_dependency.output,
        rules.mae_dependency.output
    output: touch(cfg.get("htmlOutputPath") + "/dependency.done")
    priority: 1

rule publish_local:
    shell: "rsync -Ort {config[htmlOutputPath]} {config[webDir]}"
